generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Collection {
  id        String     @id @default(uuid())
  name      String
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpoints  Endpoint[]
  order   Int @default(0)
}

model Endpoint {
  id               String      @id @default(uuid())
  path             String
  activeStatusCode Int         @default(500)
  emptyArray       Boolean     @default(false)
  method           String
  forward          Boolean     @default(false)
  delay            Int         @default(0)
  projectId        String
  collectionId     String?
  collection       Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project          Project     @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  headers          Header[]
  responses        Response[]
}

model Header {
  id         String   @id @default(uuid())
  name       String
  value      String
  endpointId String
  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Project {
  id                    String                 @id @default(uuid())
  name                  String                 @unique(map: "sqlite_autoindex_project_3")
  slug                  String                 @unique(map: "sqlite_autoindex_project_2")
  configurationId       String?                @unique(map: "sqlite_autoindex_project_4")
  configuration         ProjectConfiguration?  @relation(fields: [configurationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  collections           Collection[]
  endpoints             Endpoint[]
}

model ProjectConfiguration {
  id           String   @id @default(uuid())
  ignoreParams String?
  project      Project?
}

model Response {
  id         String   @id @default(uuid())
  body       String   @default("{ \"message\": \"Please update mocks data\" }")
  statusCode Int      @default(500)
  endpointId String
  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
